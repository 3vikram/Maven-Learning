Maven Project Structure used convention over configuration

Project Name or Artifact ID
                src/main/java
                        Package_Name
                                App.java
                src/test/java
                        Package_Name
                                AppTest.java
                target
                    MyApp.jar  (This jar contains App.class and META-INF which holds the manifest and other general information about the   JAR)
                    classes
                        App.class
                    Test-classes
                        AppTest.class
                    maven-status
                    surefire-reports  (generate test reports)
                    maven-archiver
                pom.xml
                
manifest file content will be like this,

Manifest-Version: 1.0
Main-Class: App
--------------------------------------------------------------------------------------------------------------------------------------------
Maven commands,

1. mvn compile
    Compiles the .java files in src/main/java folder and creates the .class files under target-->classes folder as shown in above project structure
    
2. mvn test-compile
    Compiles the .java files in src/main/java and src/test/java folders and creates the .class files under target-->classes and target-->Test-classes folder as shown in the above project structure
    
3. mvn clean
    Cleans target directory or removes target directory containing class and jar files
    
4. mvn test
    Runs junit tests from compiled source files in src/test/java
    
5. mvn install
    Install the package into the local repository, for use as a dependency in other projects locally
    
6. mvn clean deploy
    In a build environment, use the above command to cleanly build and deploy artifacts into the shared repository.

--------------------------------------------------------------------------------------------------------------------------------------------
Build Life Cycle of Maven,

1. Validate
    Validates whether pom.xml file is fine
    
2. Compile  (javac App.java and javac AppTest.java)
    Comiples .java files in the src/main/java and src/test/java folders and creates a target folder containing .class files under
    classes and test-classes folders

3. Test
    Runs jUnit tests in the src/test/java

4. Package  (jar -cvfm MyApp.jar manifest.txt App.class)
    Creates a package .jar or .war, .ear or .pom based on the project and a manifest file is created

5. Integration tests
    Runs Integration tests in the src/it folder

6. Verify
    Run any checks on results of integration tests to ensure quality criteria are met

7. Install
    Install the package into the local repository, for use as a dependency in other projects locally
    
8. Deploy
    Done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.
    
--------------------------------------------------------------------------------------------------------------------------------------------
POM.xml structure,

xsd definition

1. Group ID  example, com.Bank.Citi 
    
    Unique identifier among the projects or organisation
    
2. Artifact ID   example, TransactionSystem

   This is the ID or name of the project, artifactId defines the artifact's location within the repository.

3. Version   example, 1.0.1

   First number from the left defines the Major version which includes major change and features added
   Second number is a minor version which includes minor features added
   Third number is a incremental version which includes bug fixes
   
4. packaging   example, jar, war, ear

5. dependencies  example, jUnit, Hibernate, jackson and etc,.

    All dependencies are downloaded from maven repository and made available to the project
    
    Transitive dependencies are those where a library or jar requires other jar's for it to work properly, example, Hibernate jar requires jta, ehcache, dom4j, cglib and more. These will be available under project maven dependencies
    
    In order to exclude or remove use of any transitive dependencies in your project we can use <exclusion> tag under dependencies in pom.xml
    
    <dependencies>
      <dependency>
        <groupId> org.hibernate </groupId>
        <artifactId> hibernate </artifactId>
        <version> 2.5 </version>
        <exclusions>
          <exclusion>
            <groupId> javax.transaction </groupId>
            <artifactId> jta </artifactId>
          </exclusion>
        </exclusions>
      <dependency>
        <groupId> junit </groupId>
        <artifactId> junit </artifactId>
        <version> 4.2.0 </version>
        <scope> test </scope>                           // scope tag adds when to use the dependencies. Here junit will be used during test
      </dependency>
      </dependency>
    </dependencies>
    
    Note: 
        version [2.5,] means version 2.5 and above
        version [,2.5] means version 2.5 and below
        version [,2.5) means versions below 2.5 excluding 2.5
        version [2.2, 2.5] means any version between 2.2 to 2.5
        
6. build
      Plugins  example, maven plugins, ant plugins and etc,.
      
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>           // maven plugin to compile .java files to .class
            <version>3.2</version>
            <configuration>
                <verbose>true</verbose>
                <source>1.8</source>                      // java version to use
                <target>1.8</target>
                <showWarnings>true</showWarnings>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-deploy-plugin</artifactId>           
            <version>2.7</version>
            <executions>
                <execution>
                    <id>default-deploy</id>
                    <phase>deploy</phase>           // this plugin is used during deploy phase
                    <goals>
                        <goal>deploy</goal>
                    </goals>
                </execution>
            </executions>
          </plugin>
        </plugins>
      </build>

------------------------------------------------------------------------------------------------------------------------------------------

Super POM,

Effective pom is a parent pom from where project pom.xml is inherited from

This parent pom contains details like,
  1. build source directory
  2. build script directory
  3. build test source directory
  4. build output directory
  5. plugin policies like to update plugins or not, snapshots for plugins enabled or not, central repository url for downloading the plugins
  6. resources directory information
  7. target folder directory
  8. Plugins execution phase and configurations
  
Note: Recommended not to override the Effective or parent pom via project pom.xml file





