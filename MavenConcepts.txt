Maven Project Structure

Project Name or Artifact ID
                src/main/java
                        Package_Name
                                App.java
                src/test/java
                        Package_Name
                                AppTest.java
                target
                    MyApp.jar  (This jar contains App.class and META-INF which holds the manifest and other general information about the   JAR)
                    classes
                        App.class
                    Test-classes
                        AppTest.class
                    maven-status
                    surefire-reports
                    maven-archiver
                pom.xml
                
manifest file content will be like this,

Manifest-Version: 1.0
Main-Class: App
--------------------------------------------------------------------------------------------------------------------------------------------
Maven commands,

1. mvn compile
    Compiles the .java files in src/main/java folder and creates the .class files under target-->classes folder as shown in above project structure
    
2. mvn test-compile
    Compiles the .java files in src/main/java and src/test/java folders and creates the .class files under target-->classes and target-->Test-classes folder as shown in the above project structure
    
3. mvn clean
    Cleans target directory or removes target directory
    
4. mvn test
    Runs junit tests from compiled source files in src/test/java
    
5. mvn install
    Install the package into the local repository, for use as a dependency in other projects locally
    
6. mvn clean deploy
    In a build environment, use the above command to cleanly build and deploy artifacts into the shared repository.

--------------------------------------------------------------------------------------------------------------------------------------------
Build Life Cycle of Maven,

1. Validate
    Validates whether pom.xml file is fine
    
2. Compile  (javac App.java and javac AppTest.java)
    Comiples .java files in the src/main/java and src/test/java folders and creates a target folder containing .class files under
    classes and test-classes folders

3. Test
    Runs jUnit tests in the src/test/java

4. Package  (jar -cvfe MyApp.jar App.class)
    Creates a package .jar or .war or .ear based on the project

5. Integration tests
    Runs Integration tests in the src/it folder

6. Verify
    Run any checks on results of integration tests to ensure quality criteria are met

7. Install
    Install the package into the local repository, for use as a dependency in other projects locally
    
8. Deploy
    Done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.
    
--------------------------------------------------------------------------------------------------------------------------------------------
1. Group ID  example, com.Bank.Citi 
    
    Unique identifier among the projects or organisation
    
2. Artifact ID   example, TransactionSystem

   This is the ID or name of the project, artifactId defines the artifact's location within the repository.

3. Version   example, 1.0.1

   First number from the left defines the Major version which includes major change and features added
   Second number is a minor version which includes minor features added
   Third number is a incremental version which includes bug fixes
   
